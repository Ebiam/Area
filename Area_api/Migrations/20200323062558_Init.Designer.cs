// <auto-generated />
using Area_api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Area_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200323062558_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("Area_api.Models.Action", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<int>("serviceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Check if a new image have been posted by the user",
                            name = "User post new image",
                            serviceId = 5
                        },
                        new
                        {
                            id = 8,
                            description = "Check if user removed an image",
                            name = "User removes an image",
                            serviceId = 5
                        },
                        new
                        {
                            id = 2,
                            description = "Check if the user won a reputation point",
                            name = "User reputation",
                            serviceId = 5
                        },
                        new
                        {
                            id = 3,
                            description = "Check if the user have a new reply notification",
                            name = "Reply notification",
                            serviceId = 5
                        },
                        new
                        {
                            id = 4,
                            description = "Check if the user have a new board",
                            name = "New Board",
                            serviceId = 3
                        },
                        new
                        {
                            id = 9,
                            description = "Check if the user delete a board",
                            name = "Delete Board",
                            serviceId = 3
                        },
                        new
                        {
                            id = 5,
                            description = "Check if the user have a new repo",
                            name = "User new repo",
                            serviceId = 4
                        },
                        new
                        {
                            id = 6,
                            description = "Check if the user have a new notification",
                            name = "User notification",
                            serviceId = 1
                        },
                        new
                        {
                            id = 7,
                            description = "Check if the user have added a new playlist",
                            name = "User new playlist",
                            serviceId = 2
                        },
                        new
                        {
                            id = 10,
                            description = "Check if the user have deleted a playlist",
                            name = "User deleted a playlist",
                            serviceId = 2
                        });
                });

            modelBuilder.Entity("Area_api.Models.Apis.ApiToken", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("accessToken")
                        .HasColumnType("TEXT");

                    b.Property<int>("accountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("refreshToken")
                        .HasColumnType("TEXT");

                    b.Property<int>("serviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("Area_api.Models.Area", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("actionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("actionParam")
                        .HasColumnType("TEXT");

                    b.Property<int>("reactionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("reactionParam")
                        .HasColumnType("TEXT");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Area_api.Models.Links.UserServices", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("serviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("UserServices");

                    b.HasData(
                        new
                        {
                            id = 1,
                            serviceId = 5,
                            userId = 42
                        });
                });

            modelBuilder.Entity("Area_api.Models.Reaction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<int>("serviceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Reactions");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Create a new board PARAM={name} name: name of the board (a random number will be added)",
                            name = "Create board",
                            serviceId = 3
                        },
                        new
                        {
                            id = 2,
                            description = "Create a new repository PARAM={name} name: name of the repo (a random number will be added)",
                            name = "Create repository",
                            serviceId = 4
                        });
                });

            modelBuilder.Entity("Area_api.Models.Service", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("clientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("clientSecret")
                        .HasColumnType("TEXT");

                    b.Property<string>("link")
                        .HasColumnType("TEXT");

                    b.Property<string>("link2")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            id = 5,
                            clientId = "41ebd49599744a4",
                            clientSecret = "144c3ef1384ad0a5c239dd126f4ac06570bb8946",
                            link = "https://api.imgur.com/oauth2/authorize?response_type=token&client_id=41ebd49599744a4&client_secret=144c3ef1384ad0a5c239dd126f4ac06570bb8946&callback_url=http://localhost:8081/token&auth_url=https://api.imgur.com/oauth2/authorize&access_token_url=https://api.imgur.com/oauth2/token",
                            name = "Imgur"
                        },
                        new
                        {
                            id = 3,
                            clientId = "7b20ee1cf6225cb2dab5bcd4025c7d83",
                            link = "https://trello.com/1/authorize?expiration=never&name=Area&scope=read,write,account&response_type=token&key=7b20ee1cf6225cb2dab5bcd4025c7d83&return_url=http://localhost:8081/token",
                            name = "Trello"
                        },
                        new
                        {
                            id = 2,
                            clientId = "efc261a3bef74cd395f334fe0639a723",
                            clientSecret = "f5988c3dab204d9a85990af17ee95b7b",
                            link = "https://accounts.spotify.com/authorize?response_type=code&client_id=efc261a3bef74cd395f334fe0639a723&scope=user-read-playback-state%20ugc-image-upload%20user-read-playback-state%20user-modify-playback-state%20user-read-currently-playing%20streaming%20app-remote-control%20user-read-email%20user-read-private%20playlist-read-collaborative%20playlist-modify-public%20playlist-read-private%20playlist-modify-private%20user-library-modify%20user-library-read%20user-top-read%20user-read-recently-played%20user-follow-read%20user-follow-modify&redirect_uri=http://localhost:8081/token2",
                            link2 = "https://accounts.spotify.com/api/token?grant_type=authorization_code&redirect_uri=http://localhost:8081/token2&code=",
                            name = "Spotify"
                        },
                        new
                        {
                            id = 4,
                            clientId = "c961210e5b7ec1a6ef85",
                            clientSecret = "567f6b6891645292f907cc70a1d21628c0611659",
                            link = "https://github.com/login/oauth/authorize?client_id=c961210e5b7ec1a6ef85&redirect_uri=&http://localhost:8081/token2&scope=repo%20repo_deployment%20user%20public_repo",
                            link2 = "https://github.com/login/oauth/access_token?client_id=c961210e5b7ec1a6ef85&client_secret=567f6b6891645292f907cc70a1d21628c0611659&redirect_uri=http://localhost:8081/token2&scope=repo%20repo_deployment%20user%20public_repo&code=",
                            name = "Github"
                        },
                        new
                        {
                            id = 1,
                            clientId = "SGr2e0d8rwlN1g5ZZmQaQ",
                            clientSecret = "UotSqwzsT05jNN89XiAwIpiGEB7r1CjcgHngIG01TE",
                            link = "https://www.yammer.com/oauth2/authorize?client_id=SGr2e0d8rwlN1g5ZZmQaQ&response_type=code&redirect_uri=http://localhost:8081/token2",
                            link2 = "https://www.yammer.com/oauth2/access_token?client_id=SGr2e0d8rwlN1g5ZZmQaQ&client_secret=UotSqwzsT05jNN89XiAwIpiGEB7r1CjcgHngIG01TE&grant_type=authorization_code&code=",
                            name = "Yammer"
                        });
                });

            modelBuilder.Entity("Area_api.Models.Trigger", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ivalue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Svalue")
                        .HasColumnType("TEXT");

                    b.Property<int>("act_reactId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("areaId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("init")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Triggers");
                });

            modelBuilder.Entity("Area_api.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 42,
                            password = "pass",
                            username = "Enzo"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
